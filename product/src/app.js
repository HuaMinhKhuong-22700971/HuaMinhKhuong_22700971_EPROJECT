const express = require("express");
const mongoose = require("mongoose");
const config = require("./config");
const MessageBroker = require("./utils/messageBroker");
const productsRouter = require("./routes/productRoutes");
const ProductController = require("./controllers/productController"); // ðŸŽ¯ IMPORT CONTROLLER
require("dotenv").config();

// Khá»Ÿi táº¡o ProductController DUY NHáº¤T Ä‘á»ƒ dÃ¹ng chung ordersMap cho cáº£ Router vÃ  Consumer
const productController = new ProductController(); 

class App {
    constructor() {
        this.app = express();
        this.connectDB();
        this.setMiddlewares();
        this.setRoutes();
        this.setupMessageBroker(); 
    }

    async connectDB() {
        await mongoose.connect(config.mongoURI, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        console.log("MongoDB connected");
    }

    async disconnectDB() {
        await mongoose.disconnect();
        console.log("MongoDB disconnected");
    }

    setMiddlewares() {
        this.app.use(express.json());
        this.app.use(express.urlencoded({ extended: false }));
    }

    setRoutes() {
        //  Sá»¬A: Gá»ŒI HÃ€M VÃ€ TRUYá»€N INSTANCE CONTROLLER VÃ€O ROUTER
        // Router sá»­ dá»¥ng instance controller Ä‘Ã£ Ä‘Æ°á»£c táº¡o (dÃ¹ng chung ordersMap)
        this.app.use("/api/products", productsRouter(productController)); 
    }

    setupMessageBroker() {
        MessageBroker.connect();
        
        //  Sá»¬A: THÃŠM LOGIC Láº®NG NGHE message pháº£n há»“i tá»« Order Service
        MessageBroker.consumeMessage(config.productQueue, async (orderData) => {
            console.log(`âœ… PS received confirmation for order ${orderData.orderId}`);
            
            // Cáº­p nháº­t bá»™ nhá»› táº¡m (ordersMap) báº±ng dá»¯ liá»‡u Ä‘Ã£ hoÃ n thÃ nh
            if (orderData.status === "completed" && orderData.totalPrice !== undefined) {
                 // DÃ¹ng chung instance productController Ä‘Ã£ táº¡o á»Ÿ Ä‘áº§u file
                 productController.ordersMap.set(orderData.orderId, orderData); 
                 console.log(`âœ… PS updated order ${orderData.orderId} to COMPLETED.`);
            }
        });
    }

    start() {
        this.server = this.app.listen(3001, () =>
            console.log("Server started on port 3001")
        );
    }

    async stop() {
        await mongoose.disconnect();
        this.server.close();
        console.log("Server stopped");
    }
}

module.exports = App;